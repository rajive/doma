<?xml version="1.0" encoding="utf-8"?>
<!--
*****************************************************************************
*    (c) 2005-2017 Copyright, Real-Time Innovations, All rights reserved.   *
*                                                                           *
*         Permission to modify and use for internal purposes granted.       *
* This software is provided "as is", without warranty, express or implied.  *
*                                                                           *
*****************************************************************************
-->
<!-- 
=======================================================================
                   === Circle Service ===
=======================================================================
RTI Connext DDS XML App Creation

Define a service as a set of data-oriented interfaces.

The 'Circle' service has two interfaces:
	- a publication (output) of Circles
	- a subscription (input) of Circles 

These interfaces can be composed with other service interfaces 
(if desired) to define component interfaces.

Author: Rajive Joshi, Real-Time Innovations Inc. Copyright (C) 2017.
-->
<dds
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="http://community.rti.com/schema/latest/rti_dds_profiles.xsd">

	<!-- Data Types -->
	<types>
		<include file="$(TYPES_DIR)/ShapeType.xml" />
	</types>

	<!-- Participants : each participant defines a data-oriented interface -->
	<domain_participant_library name="CircleIfLib">

		<!-- Define a data-oriented interface -->
		<domain_participant
			name="Circle_Root"
			base_name="$(BASE_NAME_Circle_Root)">

			<register_type
				name="ShapeType"
				type_ref="rti::example::ShapeType" />

			<topic
				name="Circle"
				register_type_ref="ShapeType" />

		</domain_participant>

		<!-- Define a data-oriented interface -->
		<domain_participant
			name="Circle_Pub"
			base_name="$(BASE_NAME_Circle_Pub)">

			<publisher name="Circle_Pub_publisher">
				<data_writer
					name="Circle_writer"
					topic_ref="Circle">
					<datawriter_qos base_name="CircleQosLib::Circle_Pub" />
				</data_writer>
                <publisher_qos base_name="CircleQosLib::Circle_Pub" />				
			</publisher>
			
            <participant_qos base_name="CircleQosLib::Circle_Pub"/> 
		</domain_participant>

		<!-- Define a data-oriented interface -->
		<domain_participant
			name="Circle_Sub"
			base_name="$(BASE_NAME_Circle_Sub)">

			<subscriber name="Circle_Sub_subscriber">
				<data_reader
					name="Circle_reader"
					topic_ref="Circle">
					<filter
						name="CircleTopic_ContentFiltered"
						kind="builtin.sql">
						<expression> x > %0 AND x &lt; %1 AND 
									 y > %2 AND y &lt; %3 
						</expression>
						<parameter_list>
							<param>100</param>
							<param>200</param>
							<param>100</param>
							<param>200</param>
						</parameter_list>
					</filter>
                    <datareader_qos base_name="CircleQosLib::Circle_Sub" />					
				</data_reader>
                <subscriber_qos base_name="CircleQosLib::Circle_Sub" />				
			</subscriber>

            <participant_qos base_name="CircleQosLib::Circle_Sub"/> 
		</domain_participant>

	</domain_participant_library>

</dds>
