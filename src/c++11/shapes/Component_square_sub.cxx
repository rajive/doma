/* Component_square_sub.cxx

This component implements a service that subscribes to Squares.

This file is derived from code automatically generated by the rtiddsgen 
command:

rtiddsgen -language C++11 -stl -d . ../../../res/types/ShapeType.idl

Example publication of type ShapeType automatically generated by 
'rtiddsgen'. To test them follow these steps:

(1) Compile this file and the example subscription.

(2) Start the subscription on the same domain used for RTI Data Distribution
Service with the command
objs/<arch>/Component_square_sub <domain_id> <sample_count>

(3) Start the publication on the same domain used for RTI Data Distribution
Service with the command
objs/<arch>/Component_square_pub <domain_id> <sample_count>

(4) [Optional] Specify the list of discovery initial peers and 
multicast receive addresses via an environment variable or a file 
(in the current working directory) called NDDS_DISCOVERY_PEERS. 

You can run any number of publishers and subscribers programs, and can 
add and remove them dynamically from the domain.

Example:

To run the example application on domain <domain_id>:

On Unix: 

objs/<arch>/Component_square_pub <domain_id>
objs/<arch>/Component_square_sub <domain_id>

On Windows:

objs\<arch>\Component_square_pub <domain_id>
objs\<arch>\Component_square_sub <domain_id>
*/

#include <iostream>

#include <dds/pub/ddspub.hpp>

#include "Component.hpp"
#include "Service_subscriber.hpp"

#include "ShapeType.hpp"

class Component_subscriber : public Component {
public:
	virtual void register_types() {
		rti::domain::register_type<rti::example::ShapeType>("ShapeType");
	}
};

int main(int argc, char *argv[])
{
	return Component_subscriber().main(argc, argv,
		"Component_Library::Component",
		*std::make_shared<Service_subscriber>("Square_Subscriber::SquareReader"));
}

