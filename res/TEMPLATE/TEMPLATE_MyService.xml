<?xml version="1.0" encoding="utf-8" ?>
<!--
*****************************************************************************
*    (c) 2005-2018 Copyright, Real-Time Innovations, All rights reserved.   *
*                                                                           *
*         Permission to modify and use for internal purposes granted.       *
* This software is provided "as is", without warranty, express or implied.  *
*                                                                           *
*****************************************************************************
-->
<!-- 
=======================================================================
                   === MyService Service ===
=======================================================================
RTI Connext DDS XML App Creation

Define a service "MyService" as a set of data-oriented interfaces.

The 'MyService' service can have any number of interfaces:
	- InterfaceX (illustrated in the template below)
	- InterfaceY
	- ...and so on...

The interfaces can be composed with each other or other service interfaces 
(if desired) to define component interfaces.

Author: Rajive Joshi, Real-Time Innovations Inc. Copyright (C) 2018.
-->
<dds xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://community.rti.com/schema/latest/rti_dds_profiles.xsd">

    <!-- Data Types -->
    <types>
        <include file="$(TYPES_DIR)/MyType.xml" />
    </types>

    <!-- Participants : each participant defines a data-oriented interface -->
    <domain_participant_library name="MyServiceLib">

        <!-- Root: empty interface to register types and topics -->
        <domain_participant name="Root" base_name="$(BASE_NAME_MyService_Root)">

            <!-- register types used by the service -->
            <register_type name="MyType" type_ref="rti::example::MyType" />

            <!-- register topics used by the service -->
            <topic name="MyTopic" register_type_ref="MyType" />

        </domain_participant>


        <!-- Define a data-oriented interface -->
        <domain_participant name="InterfaceX" base_name="$(BASE_NAME_MyService_InterfaceX)">

            <!-- Inputs -->
            <subscriber name="SubscriberA_sub">

                <data_reader name="MyTopic_reader" topic_ref="MyTopic">
                    <filter name="Chat" kind="builtin.sql">
                        <expression>
                          user = %0 OR user = %1 OR user = %2
                      </expression>
                        <parameter_list>
                            <param>'Rajive'</param>
                            <param>'Rajive Lua'</param>
                            <param>'Jack'</param>
                        </parameter_list>
                    </filter>
                    <datareader_qos base_name="MyServiceQosLib::InterfaceX" />
                </data_reader>
                <!-- ... -->

                <subscriber_qos base_name="MyServiceQosLib::InterfaceX" />
            </subscriber>
            <!-- ... -->


            <!-- Outputs -->
            <publisher name="PublisherB_pub">

                <data_writer name="MyTopic_writer" topic_ref="MyTopic">
                    <datawriter_qos base_name="MyServiceQosLib::InterfaceX" />
                </data_writer>
                <!-- ... -->

                <publisher_qos base_name="MyServiceQosLib::InterfaceX" />
            </publisher>
            <!-- ... -->

            <participant_qos base_name="MyDeploymentQosLib::InterfaceX" />
        </domain_participant>

    </domain_participant_library>

</dds>
